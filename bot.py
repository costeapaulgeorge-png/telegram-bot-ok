# -*- coding: utf-8 -*-
"""
Asistentul ComunitÄƒÈ›ii â€“ Bot Telegram (PTB v20+)

ENV necesar:
  TELEGRAM_TOKEN   = tokenul botului de la BotFather
  OPENAI_API_KEY   = cheia OpenAI
  GROUP_ID         = -100xxxxxxxxxx  (chat id-ul grupului)
  THREAD_ID        = <id-ul topicului din grup> (int)
  OWNER_USER_ID    = <id-ul tÄƒu telegram> (opÈ›ional, pt /ids)

Comenzi:
  /ping               => rÄƒspunde "pong âœ…" (test rapid cÄƒ botul ruleazÄƒ)
  /ids                => afiÈ™eazÄƒ chat.id & thread_id (doar OWNER_USER_ID, dacÄƒ setat)
  /ask <Ã®ntrebare>    => rÄƒspunde cu OpenAI DOAR Ã®n grupul + topicul permis
"""

import os
import logging
from datetime import datetime

from telegram import Update
from telegram.constants import ChatAction, ParseMode, ChatType
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)

# OpenAI SDK 1.x
from openai import OpenAI

# ---------------- LOGGING ----------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("asistent-comunitate")

# ---------------- ENV ----------------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()

# Grupul & topicul unde botul are voie sÄƒ rÄƒspundÄƒ
GROUP_ID = int(os.getenv("GROUP_ID", "0"))
THREAD_ID = int(os.getenv("THREAD_ID", "0"))

# opÈ›ional â€“ numai pt. comanda /ids
OWNER_USER_ID = int(os.getenv("OWNER_USER_ID", "0"))

if not TELEGRAM_TOKEN:
    raise RuntimeError("Lipsea TELEGRAM_TOKEN Ã®n environment.")
if not OPENAI_API_KEY:
    raise RuntimeError("Lipsea OPENAI_API_KEY Ã®n environment.")
if not GROUP_ID or not THREAD_ID:
    log.warning("AtenÈ›ie: GROUP_ID sau THREAD_ID nu sunt setate. /ask va refuza Ã®n afara locului permis.")

# ---------------- OpenAI client ----------------
oai = OpenAI(api_key=OPENAI_API_KEY)

# Prompt de sistem â€“ succint È™i sigur
SYSTEM_PROMPT = (
    "EÈ™ti Asistentul ComunitÄƒÈ›ii pentru grupul lui Paul. RÄƒspunzi exclusiv Ã®n scop educaÈ›ional, "
    "explicÃ¢nd legÄƒturi emoÈ›iiâ€“corp (5LB/NMG, Recall Healing) Ã®n mod empatic È™i clar, 5â€“8 rÃ¢nduri. "
    "NU oferi diagnostic/indicaÈ›ii medicale/medicaÈ›ie/doze/investigaÈ›ii, nu promiÈ›i vindecare. "
    "DacÄƒ nu ai destule date, spune asta È™i propune 3â€“5 Ã®ntrebÄƒri de jurnal scurte."
)

# ---------------- Helpers ----------------
def in_allowed_place(update: Update) -> bool:
    """
    ÃŽntoarce True doar dacÄƒ mesajul vine din grupul & topicul permise.
    """
    if not update.effective_chat or not update.effective_message:
        return False

    # trebuie sÄƒ fim Ã®n grupul corect
    if update.effective_chat.id != GROUP_ID:
        return False

    # trebuie sÄƒ fie topic message & thread id corect
    msg = update.effective_message
    if not getattr(msg, "is_topic_message", False):
        return False

    return getattr(msg, "message_thread_id", None) == THREAD_ID


async def send_typing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id,
            action=ChatAction.TYPING
        )
    except Exception:
        pass


# ---------------- OpenAI wrapper ----------------
async def ask_openai(user_msg: str) -> str:
    """
    Apel la OpenAI, executat non-blocant.
    """
    import asyncio
    from concurrent.futures import ThreadPoolExecutor

    def _call():
        r = oai.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0.4,
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": user_msg.strip()},
            ],
        )
        return (r.choices[0].message.content or "").strip()

    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(ThreadPoolExecutor(max_workers=4), _call)


# ---------------- Commands ----------------
async def ping_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Test simplu â€“ nu implicÄƒ OpenAI. DacÄƒ rÄƒspunde, botul ruleazÄƒ ok.
    """
    await update.message.reply_text("pong âœ…")


async def ids_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    AfiÈ™eazÄƒ rapid id-urile utile (doar pt OWNER_USER_ID dacÄƒ e setat).
    """
    if OWNER_USER_ID and update.effective_user.id != OWNER_USER_ID:
        return

    msg = update.effective_message
    info = (
        f"chat.id = {update.effective_chat.id}\n"
        f"is_topic_message = {getattr(msg, 'is_topic_message', None)}\n"
        f"message_thread_id = {getattr(msg, 'message_thread_id', None)}\n"
        f"date = {datetime.fromtimestamp(msg.date.timestamp())}"
    )
    await update.message.reply_text(f"```\n{info}\n```", parse_mode=ParseMode.MARKDOWN)


async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "Salut! Sunt *Asistentul ComunitÄƒÈ›ii*.\n\n"
        "Comenzi utile:\n"
        "â€¢ /ping â€“ test rapid cÄƒ botul e online\n"
        "â€¢ /ids â€“ (admin) afiÈ™eazÄƒ chat.id & thread_id\n"
        "â€¢ /ask <Ã®ntrebare> â€“ rÄƒspunde *doar* Ã®n topicul comunitÄƒÈ›ii\n"
    )
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)


async def ask_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    ÃŽntrebÄƒri cÄƒtre modelul OpenAI â€“ **doar** Ã®n grupul/tema permise.
    """
    # rÄƒspunde doar Ã®n locul permis
    if not in_allowed_place(update):
        # Ã®n privat È™i Ã®n alte locuri â€“ tÄƒcere sau mesaj prietenos
        if update.effective_chat.type == ChatType.PRIVATE:
            await update.message.reply_text(
                "FoloseÈ™te comanda Ã®n topicul comunitÄƒÈ›ii. Acest bot rÄƒspunde doar acolo. ðŸ˜Š"
            )
        return

    question = " ".join(context.args).strip()
    if not question:
        return await update.message.reply_text(
            "Scrie: `/ask Ã®ntrebarea ta`", parse_mode=ParseMode.MARKDOWN
        )

    await send_typing(update, context)

    try:
        answer = await ask_openai(question)
        if not answer:
            answer = "Nu am reuÈ™it sÄƒ formulez un rÄƒspuns. Te rog Ã®ncearcÄƒ din nou."

        await update.message.reply_text(answer, disable_web_page_preview=True)

    except Exception as e:
        log.exception("Eroare la OpenAI: %s", e)
        await update.message.reply_text("A apÄƒrut o eroare. Te rog Ã®ncearcÄƒ din nou.")


# ---------------- Main ----------------
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # Comenzi
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("ping", ping_cmd))   # test viaÈ›Äƒ
    app.add_handler(CommandHandler("ids", ids_cmd))     # debug id-uri
    app.add_handler(CommandHandler("ask", ask_cmd))     # Ã®ntrebÄƒri OpenAI

    log.info("Botul porneÈ™te cu pollingâ€¦")
    app.run_polling(allowed_updates=["message"])


if __name__ == "__main__":
    main()
